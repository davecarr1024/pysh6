from unittest import TestCase
from pysh.core import regex


class RegexTest(TestCase):
    def test_load(self):
        for value, expected in list[tuple[str, regex.Regex]](
            [
                (
                    "a",
                    regex.Literal("a"),
                ),
                (
                    "",
                    regex.And([]),
                ),
                (
                    "ab",
                    regex.And(
                        [
                            regex.Literal("a"),
                            regex.Literal("b"),
                        ]
                    ),
                ),
                (
                    r"\a",
                    regex.Literal("a"),
                ),
                (
                    r"\d",
                    regex.Regex.digits(),
                ),
                (
                    r"\s",
                    regex.Regex.whitespace(),
                ),
                (
                    "^a",
                    regex.Not(regex.Literal("a")),
                ),
                (
                    "[a-z]",
                    regex.Range("a", "z"),
                ),
                (
                    "^[a-z]",
                    regex.Not(regex.Range("a", "z")),
                ),
                (
                    ".",
                    regex.Any(),
                ),
                (
                    "(a)",
                    regex.Literal("a"),
                ),
                (
                    "(ab)",
                    regex.And(
                        [
                            regex.Literal("a"),
                            regex.Literal("b"),
                        ]
                    ),
                ),
                (
                    "(a|b)",
                    regex.Or(
                        [
                            regex.Literal("a"),
                            regex.Literal("b"),
                        ]
                    ),
                ),
                (
                    "a*",
                    regex.ZeroOrMore(regex.Literal("a")),
                ),
                (
                    "(a)*",
                    regex.ZeroOrMore(regex.Literal("a")),
                ),
                (
                    "(a|b)*",
                    regex.ZeroOrMore(
                        regex.Or(
                            [
                                regex.Literal("a"),
                                regex.Literal("b"),
                            ]
                        )
                    ),
                ),
                (
                    "[a-z]*",
                    regex.ZeroOrMore(regex.Range("a", "z")),
                ),
                (
                    ".*",
                    regex.ZeroOrMore(regex.Any()),
                ),
                (
                    r"\d*",
                    regex.ZeroOrMore(regex.Regex.digits()),
                ),
                (
                    "a+",
                    regex.OneOrMore(regex.Literal("a")),
                ),
                (
                    "(a)+",
                    regex.OneOrMore(regex.Literal("a")),
                ),
                (
                    "(a|b)+",
                    regex.OneOrMore(
                        regex.Or(
                            [
                                regex.Literal("a"),
                                regex.Literal("b"),
                            ]
                        )
                    ),
                ),
                (
                    "[a-z]+",
                    regex.OneOrMore(regex.Range("a", "z")),
                ),
                (
                    ".+",
                    regex.OneOrMore(regex.Any()),
                ),
                (
                    r"\d+",
                    regex.OneOrMore(regex.Regex.digits()),
                ),
                (
                    "a?",
                    regex.ZeroOrOne(regex.Literal("a")),
                ),
                (
                    "(a)?",
                    regex.ZeroOrOne(regex.Literal("a")),
                ),
                (
                    "(a|b)?",
                    regex.ZeroOrOne(
                        regex.Or(
                            [
                                regex.Literal("a"),
                                regex.Literal("b"),
                            ]
                        )
                    ),
                ),
                (
                    "[a-z]?",
                    regex.ZeroOrOne(regex.Range("a", "z")),
                ),
                (
                    ".?",
                    regex.ZeroOrOne(regex.Any()),
                ),
                (
                    r"\d?",
                    regex.ZeroOrOne(regex.Regex.digits()),
                ),
            ]
        ):
            with self.subTest(value=value, expected=expected):
                actual = regex.Regex.load(value)
                self.assertEqual(
                    actual,
                    expected,
                    f"actual {actual} != expected {expected}",
                )
