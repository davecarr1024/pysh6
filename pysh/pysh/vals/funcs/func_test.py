from typing import Optional
from unittest import TestCase
from pysh import core, pysh


class FuncTest(TestCase):
    def test_call(self) -> None:
        for func, state, args, expected in list[
            tuple[
                pysh.vals.funcs.Func,
                pysh.State,
                pysh.vals.Args,
                Optional[pysh.vals.Val],
            ]
        ](
            [
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.none_class,
                    ),
                    pysh.State(),
                    pysh.vals.Args(),
                    pysh.vals.none,
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.none_class,
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.literal(
                                        pysh.vals.int_(1),
                                    )
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(),
                    None,
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.literal(
                                        pysh.vals.int_(1),
                                    )
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(),
                    pysh.vals.int_(1),
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.ref_("a"),
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(),
                    None,
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.ref_("a"),
                                ),
                            ]
                        ),
                    ),
                    pysh.State(
                        pysh.vals.Scope(
                            {
                                "a": pysh.vals.Var.for_val(
                                    pysh.vals.int_(1),
                                )
                            }
                        )
                    ),
                    pysh.vals.Args(),
                    pysh.vals.int_(1),
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        params=pysh.vals.Params(
                            [
                                pysh.vals.Param(
                                    pysh.vals.int_class,
                                    "a",
                                ),
                            ]
                        ),
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.ref_("a"),
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(),
                    None,
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        params=pysh.vals.Params(
                            [
                                pysh.vals.Param(
                                    pysh.vals.int_class,
                                    "a",
                                ),
                            ]
                        ),
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.ref_("a"),
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(
                        [
                            pysh.vals.Arg(
                                pysh.vals.none,
                            ),
                        ]
                    ),
                    None,
                ),
                (
                    pysh.vals.funcs.Func(
                        "f",
                        pysh.vals.int_class,
                        params=pysh.vals.Params(
                            [
                                pysh.vals.Param(
                                    pysh.vals.int_class,
                                    "a",
                                ),
                            ]
                        ),
                        body=pysh.statements.Block(
                            [
                                pysh.statements.Return(
                                    pysh.exprs.ref_("a"),
                                ),
                            ]
                        ),
                    ),
                    pysh.State(),
                    pysh.vals.Args(
                        [
                            pysh.vals.Arg(
                                pysh.vals.int_(1),
                            ),
                        ]
                    ),
                    pysh.vals.int_(1),
                ),
            ]
        ):
            with self.subTest(
                func=str(func),
                state=str(state),
                args=str(args),
                expected=str(expected),
            ):
                if expected is None:
                    with self.assertRaises(core.errors.Error):
                        func(state, args)
                else:
                    self.assertEqual(func(state, args), expected)
